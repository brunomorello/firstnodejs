Study Notes

1 - Creating a Node Project

	1.1 - Run the command bellow
		npm init

	1.2 - Fillout the project information

	1.3 - Installing Express - Framework
		npm install express

2 - Deploying a Projetct

	2.1 - If you receive a nodejs project, remember it doesnt have the node_modules folder
		run the command bellow to generate it

		npm install

3 - Improving the server.js, creating a customized express

	3.1 - Create a custom-express.js on src/config/custom-express.js and add the lines bellow

		const express = require('express');
		const app = express();

		module.exports = app;		

	3.2 - Change server.js where you must remove the require from express and just import your custom express

		const app = require('./src/config/custom-express');

		app.listen(3000, () => {

			// your code here ...

	3.3 - Create a file to handle app routes. File: app/routes/routes.js and add the code bellow:

		module.exports = (app) => {

			app.get('/', (req, res) => {

				res.send(`
					<html>
						<head>
							<meta charset="UTF-8">
							<title>Hello World</title>
						</head>
						<body>
							<h1>Hello World</h1>
						</body>
					</html>
				`);
			});

			app.get('/books', (req, res) => {

				res.send(`
					<html>
						<head>
							<meta charset="UTF-8">
							<title>Books</title>
						</head>
						<body>
							<h1>Listing Books</h1>
						</body>
					</html>
				`);

			});
			
		}

	3.4 - Import the routes in your custom express, add the lines bellow:

		const routes = require('../app/routes/routes');
		routes(app);

4 - Adding productivity to your node, where you dont need to stop/start your server after each change in you app

	npm install nodemon --save-dev --save-exact

	4.1 - Install nodemon globally

		npm install -g nodemon --save-exact

	4.2 - Install marko framework for page templates

		npm install marko@4.13.4-1 --save-exact

		4.2.1 - Enable marko in your custom express adding the lines bellow in the begin of the custom-express.js

			require('marko/node-require').install();
			require('marko/express');		

		4.2.2 - Create the path structure for views, creating the book list marko file:

			src/
				app/
					views/
						books/
							list/
								list.marko

		4.2.3 - Remove hardcoded view from routes.js and change the /books context to:

			res.marko(

				require('../views/books/list/list.marko'),
				{
					books: [
						{
							id: 1,
							title: 'Node Fundamentals'
						},

						{
							id: 2,
							title: 'Node Advanced'
						}
					]
				}

			);	
			
		4.2.4 - Add the lines bellow to list.marko

			<html>
				<head>
					<meta charset="UTF-8">
					<title>Books</title>
				</head>
				<body>

					<h2>Books List</h2>

					<table>
						<tr>
							<td>ID</td>
							<td>Title</td>
						</tr>

						<tr for(book in data.books)>
							<td>${book.id}</td>
							<td>${book.title}</td>
						</tr>
					</table>
				</body>
			</html>

5 - Add a database to your application

	5.1 - Install a specific version of sqlite3

		npm install sqlite3@4.0.2 --save-exact

	5.2 - Define database schema and add some records, create the database.js file in src/config/database.js and add the script bellow:

		const sqlite3 = require('sqlite3').verbose();
		const db = new sqlite3.Database('data.db');

		const USERS_SCHEMA = `
			CREATE TABLE IF NOT EXISTS users (
				id INTEGER PRIMARY KEY AUTOINCREMENT,
				full_name VARCHAR(60) NOT NULL,
				email VARCHAR(255) NOT NULL,
				password VARCHAR(255) NOT NULL
			)
		`;

		const INSERT_USER_1 = `
			INSERT INTO users(
				full_name,
				email,
				password
			) 
			SELECT 'Bruno Moreno',
				'brunomorello7@gmail.com',
				'123'
			WHERE NOT EXISTS (
				SELECT *
				FROM users
				WHERE email = 'brunomorello7@gmail.com'
			)
		`;

		const BOOKS_SCHEMA = `
			CREATE TABLE IF NOT EXISTS books (
				id INTEGER PRIMARY KEY AUTOINCREMENT,
				title TEXT NOT NULL,
				price REAL NOT NULL,
				description TEXT DEFAULT(NULL)
			)
		`;

		const INSERT_BOOK_1 = `
			INSERT INTO books(
				title,
				price,
				description
			)
			SELECT 'Node Fundamentals',
				30.0,
				'How to create node apps'
			WHERE NOT EXISTS (
				SELECT *
				FROM books WHERE title = 'Node Fundamentals'
			)
		`;

		const INSERT_BOOK_2 = `
			INSERT INTO books(
				title,
				price,
				description
			)
			SELECT 'JavaScript Fundamentals',
				50.0,
				'How to create node apps'
			WHERE NOT EXISTS (
				SELECT *
				FROM books WHERE title = 'JavaScript Fundamentals'
			)
		`;

		db.serialize(() => {

			db.run('PRAGMA foreign_keys=ON');
			db.run(USERS_SCHEMA);
			db.run(INSERT_USER_1);
			db.run(BOOKS_SCHEMA);
			db.run(INSERT_BOOK_1);
			db.run(INSERT_BOOK_2);

			db.each("SELECT * FROM users", (err, user) => {
				console.log(`User: ${user}`);
			});
		});

		process.on('SIGINT', () => {
			db.close(() => {
				console.log('DB closed!');
				process.exit(0);
			})
		});

		module.exports = db;	

	5.3 - Change the routes.js to use data from database instead of harcoded data

